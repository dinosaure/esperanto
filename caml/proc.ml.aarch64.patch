--- asmcomp/arm64/proc.ml
+++ asmcomp/arm64/proc.ml
@@ -33,10 +33,10 @@ let word_addressed = false
     x0 - x15              general purpose (caller-save)
     x16, x17              temporaries (used by call veeners)
     x18                   platform register (reserved)
-    x19 - x25             general purpose (callee-save)
+    x19 - x24             general purpose (callee-save)
     x26                   trap pointer
     x27                   alloc pointer
-    x28                   domain state pointer
+    x25                   domain state pointer
     x29                   frame pointer
     x30                   return address
     sp / xzr              stack pointer / zero register
@@ -49,9 +49,9 @@ let word_addressed = false
 let int_reg_name =
   [| "x0";  "x1";  "x2";  "x3";  "x4";  "x5";  "x6";  "x7";  (* 0 - 7 *)
      "x8";  "x9";  "x10"; "x11"; "x12"; "x13"; "x14"; "x15"; (* 8 - 15 *)
-     "x19"; "x20"; "x21"; "x22"; "x23"; "x24"; "x25";        (* 16 - 22 *)
-     "x26"; "x27"; "x28";                                    (* 23 - 25 *)
-     "x16"; "x17" |]                                         (* 26 - 27 *)
+     "x19"; "x20"; "x21"; "x22"; "x23"; "x24";               (* 16 - 21 *)
+     "x26"; "x27"; "x25";                                    (* 22 - 24 *)
+     "x16"; "x17" |]                                         (* 25 - 26 *)
 
 let float_reg_name =
   [| "d0";  "d1";  "d2";  "d3";  "d4";  "d5";  "d6";  "d7";
@@ -67,7 +67,7 @@ let register_class r =
   | Float -> 1
 
 let num_available_registers =
-  [| 23; 32 |] (* first 23 int regs allocatable; all float regs allocatable *)
+  [| 22; 32 |] (* first 22 int regs allocatable; all float regs allocatable *)
 
 let first_available_register =
   [| 0; 100 |]
@@ -80,8 +80,8 @@ let rotate_registers = true
 (* Representation of hard registers by pseudo-registers *)
 
 let hard_int_reg =
-  let v = Array.make 28 Reg.dummy in
-  for i = 0 to 27 do
+  let v = Array.make 27 Reg.dummy in
+  for i = 0 to 26 do
     v.(i) <- Reg.at_location Int (Reg i)
   done;
   v
@@ -230,7 +230,7 @@ let int_dwarf_reg_numbers =
   [| 0; 1; 2; 3; 4; 5; 6; 7;
      8; 9; 10; 11; 12; 13; 14; 15;
      19; 20; 21; 22; 23; 24;
-     25; 26; 27; 28; 16; 17;
+     26; 27; 25; 16; 17;
   |]
 
 let float_dwarf_reg_numbers =
@@ -283,14 +283,14 @@ let destroyed_at_reloadretaddr = [| |]
 let safe_register_pressure = function
   | Iextcall _ -> 7
   | Ialloc _ | Ipoll _ -> 22
-  | _ -> 23
+  | _ -> 22
 
 let max_register_pressure = function
   | Iextcall _ -> [| 7; 8 |]  (* 7 integer callee-saves, 8 FP callee-saves *)
   | Ialloc _ | Ipoll _ -> [| 22; 32 |]
   | Iintoffloat | Ifloatofint
-  | Iload(Single, _, _) | Istore(Single, _, _) -> [| 23; 31 |]
-  | _ -> [| 23; 32 |]
+  | Iload(Single, _, _) | Istore(Single, _, _) -> [| 22; 31 |]
+  | _ -> [| 22; 32 |]
 
 (* Layout of the stack *)
 let frame_required fd =
